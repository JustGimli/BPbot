import asyncio
from abc import ABC, abstractmethod
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


class AbstractBot(ABC):
    @abstractmethod
    async def register_handlers(self):
        self.dp.register_message_handler(self.start, commands=['start'])

    async def start(self, message: types.Message):
        await self.bot.send_message(message.from_id, text=self.start_message)
        await self.bot.send_message(message.from_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –§–∞–º–∏–ª–∏—é, –ò–º—è –∏ –û—Ç—á–µ—Å—Ç–≤–æ: üëá')
        await self.state.FIO.set()

    async def start_polling(self):
        await self.bot.delete_webhook()
        await self.register_handlers()
        await self.dp.start_polling()

    def run(self):

        asyncio.run(self.start_polling())


class BaseBot(AbstractBot):
    def set_markup(self):

        markup = ReplyKeyboardMarkup(resize_keyboard=True)

        if self.primary:
            markup.add(
                KeyboardButton(
                    text='–ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
                ))

        if self.secondary:
            markup.add(
                KeyboardButton(
                    text='–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
                ))

        return markup

    async def get_fio(self, message: types.Message, state: FSMContext):
        text = message.text.strip(' ').split()

        if len(text) == 3:

            async with state.proxy() as data:
                data['fio'] = ''.join(text)

            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(
                KeyboardButton(
                    text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ù–æ–º–µ—Ä–æ–º',
                    request_contact=True
                )
            )

            await self.bot.send_message(message.from_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º".', reply_markup=markup)
            await self.state.PHONE.set()
        else:
            await self.bot.send_message(message.from_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')

    async def get_phone(self, message: types.Message, state: FSMContext):

        async with state.proxy() as data:
            data['phone'] = message.contact.phone_number

        markup = self.set_markup()

        await self.bot.send_message(message.from_id, text='–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ', reply_markup=markup)
        await self.state.OPTION.set()

    async def set_option(self, message: types.Message, state: FSMContext):

        if message.text == '–ü–µ—Ä–≤–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è':

            text = '''–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 3¬†000 —Ä—É–±–ª–µ–π.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É –≤–∞—Å –±—É–¥–µ—Ç –Ω–µ–¥–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã'''

            await self.bot.send_message(message.from_id, text)
            await self.state.PRIMARY.set()

        elif message.text == '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è':

            text = '''–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 3¬†000 —Ä—É–±–ª–µ–π.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É –≤–∞—Å –±—É–¥–µ—Ç –Ω–µ–¥–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã'''

            await self.bot.send_message(message.from_id, text)
            await self.state.REPEAT.set()
        else:
            self.bot.send_message(
                message.from_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ —Ç–∞–∫–∞—è –æ–ø—Ü–∏—è –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç')

    async def start_polling(self):
        self.dp.register_message_handler(self.get_fio, state=self.state.FIO)
        self.dp.register_message_handler(
            self.set_option, state=self.state.OPTION)
        self.dp.register_message_handler(self.get_phone, content_types=[
                                         types.ContentType.CONTACT], state=self.state.PHONE)
        return await super().start_polling()

    # def send_message(self, message: types.Message):
